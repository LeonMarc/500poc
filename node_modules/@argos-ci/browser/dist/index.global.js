"use strict";
(() => {
  // src/global/stabilization.ts
  var GLOBAL_CSS = `
/* Hide carets */
* {
  caret-color: transparent !important;
}

/* Reduce text-aliasing issues in Blink browsers */
* {
  -webkit-font-smoothing: antialiased !important;
}

/* Hide scrollbars */
::-webkit-scrollbar {
  display: none !important;
}

/* Make the element transparent */
[data-visual-test="transparent"] {
  color: transparent !important;
  font-family: monospace !important;
  opacity: 0 !important;
}

/* Remove the element */
[data-visual-test="removed"] {
  display: none !important;
}

/* Disable radius */
[data-visual-test-no-radius]:not([data-visual-test-no-radius="false"]) {
  border-radius: 0 !important;
}
`;
  function setAndBackupSpellcheck(element, spellcheck) {
    element.setAttribute(
      "data-argos-bck-spellcheck",
      element.getAttribute("spellcheck") ?? "unset"
    );
    element.setAttribute("spellcheck", spellcheck);
  }
  var SPELL_CHECK_QUERY = "[contenteditable]:not([contenteditable=false]):not([spellcheck=false]), input:not([spellcheck=false]), textarea:not([spellcheck=false])";
  function disableSpellCheck(document2) {
    const inputs = document2.querySelectorAll(SPELL_CHECK_QUERY);
    inputs.forEach((element) => {
      if (!checkIsHTMLElement(element)) {
        return;
      }
      setAndBackupSpellcheck(element, "false");
    });
  }
  function restoreSpellCheck(document2) {
    const inputs = document2.querySelectorAll(SPELL_CHECK_QUERY);
    inputs.forEach((input) => {
      const spellcheck = input.getAttribute("data-argos-bck-spellcheck");
      if (spellcheck === "unset") {
        input.removeAttribute("spellcheck");
      } else if (spellcheck) {
        input.setAttribute("spellcheck", spellcheck);
      }
      input.removeAttribute("data-argos-bck-spellcheck");
    });
  }
  function injectGlobalStyles(document2, css, id) {
    const style = document2.createElement("style");
    style.textContent = css;
    style.id = id;
    document2.head.appendChild(style);
  }
  function removeGlobalStyles(document2, id) {
    const style = document2.getElementById(id);
    if (style) {
      style.remove();
    }
  }
  var checkIsHTMLElement = (element) => {
    return "style" in element;
  };
  function setAndBackupPosition(element, position) {
    const previousPosition = element.style.position;
    const previousRect = element.getBoundingClientRect();
    element.style.position = position;
    const currentRect = element.getBoundingClientRect();
    if (previousRect.x !== currentRect.x || previousRect.y !== currentRect.y) {
      element.style.position = previousPosition;
      return;
    }
    element.setAttribute("data-argos-bck-position", previousPosition ?? "unset");
  }
  function stabilizeElementPositions(document2) {
    const window2 = document2.defaultView;
    if (!window2) {
      return;
    }
    const elements = Array.from(document2.querySelectorAll("*"));
    elements.forEach((element) => {
      if (!checkIsHTMLElement(element)) {
        return;
      }
      if (element.tagName === "IFRAME") {
        return;
      }
      const style = window2.getComputedStyle(element);
      const position = style.position;
      if (position === "fixed") {
        setAndBackupPosition(element, "absolute");
      } else if (position === "sticky") {
        setAndBackupPosition(element, "relative");
      }
    });
  }
  function restoreElementPositions(document2) {
    const window2 = document2.defaultView;
    if (!window2) {
      return;
    }
    const elements = Array.from(document2.querySelectorAll("*"));
    elements.forEach((element) => {
      if (!checkIsHTMLElement(element)) {
        return;
      }
      const position = element.getAttribute("data-argos-bck-position");
      if (position === "unset") {
        element.style.removeProperty("position");
      } else if (position) {
        element.style.position = position;
      }
      element.removeAttribute("data-argos-bck-position");
    });
  }
  function addGlobalClass(document2, className) {
    document2.documentElement.classList.add(className);
  }
  function removeGlobalClass(document2, className) {
    document2.documentElement.classList.remove(className);
  }
  function setup(document2, { fullPage, argosCSS } = {}) {
    addGlobalClass(document2, "__argos__");
    injectGlobalStyles(document2, GLOBAL_CSS, "argos-reset-style");
    if (argosCSS) {
      injectGlobalStyles(document2, argosCSS, "argos-user-style");
    }
    disableSpellCheck(document2);
    if (fullPage) {
      stabilizeElementPositions(document2);
    }
  }
  function teardown(document2, { fullPage, argosCSS } = {}) {
    removeGlobalClass(document2, "__argos__");
    removeGlobalStyles(document2, "argos-reset-style");
    if (argosCSS) {
      removeGlobalStyles(document2, "argos-user-style");
    }
    restoreSpellCheck(document2);
    if (fullPage) {
      restoreElementPositions(document2);
    }
  }
  function waitForFontsToLoad(document2) {
    return document2.fonts.status === "loaded";
  }
  function waitForImagesToLoad(document2) {
    const images = Array.from(document2.images);
    images.forEach((img) => {
      if (img.decoding !== "sync") {
        img.decoding = "sync";
      }
      if (img.loading !== "eager") {
        img.loading = "eager";
      }
    });
    return images.every((img) => img.complete);
  }
  function waitForNoBusy(document2) {
    const checkIsVisible = (element) => {
      if (element instanceof HTMLElement && (element.offsetHeight !== 0 || element.offsetWidth !== 0)) {
        return true;
      }
      return element.getClientRects().length > 0;
    };
    const elements = Array.from(document2.querySelectorAll('[aria-busy="true"]'));
    return elements.every((element) => !checkIsVisible(element));
  }
  function getStabilityState(document2, options) {
    const { ariaBusy = true, images = true, fonts = true } = options ?? {};
    return {
      ariaBusy: ariaBusy ? waitForNoBusy(document2) : true,
      images: images ? waitForImagesToLoad(document2) : true,
      fonts: fonts ? waitForFontsToLoad(document2) : true
    };
  }
  var VALIDATION_ERRORS = {
    ariaBusy: "Some elements still have `aria-busy='true'`",
    images: "Some images are still loading",
    fonts: "Some fonts are still loading"
  };
  function getStabilityFailureReasons(document2, options) {
    const stabilityState = getStabilityState(document2, options);
    return Object.entries(stabilityState).reduce(
      (reasons, [key, value]) => {
        if (!value) {
          reasons.push(VALIDATION_ERRORS[key]);
        }
        return reasons;
      },
      []
    );
  }
  function checkIsStable(document2, options) {
    const stabilityState = getStabilityState(document2, options);
    return Object.values(stabilityState).every(Boolean);
  }

  // src/global/media.ts
  function getColorScheme(window2) {
    return window2.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  }
  function getMediaType(window2) {
    return window2.matchMedia("print").matches ? "print" : "screen";
  }

  // src/global/index.ts
  var ArgosGlobal = {
    checkIsStable: (options) => checkIsStable(document, options),
    getStabilityFailureReasons: (options) => getStabilityFailureReasons(document, options),
    setup: (options = {}) => setup(document, options),
    teardown: (options = {}) => teardown(document, options),
    getColorScheme: () => getColorScheme(window),
    getMediaType: () => getMediaType(window)
  };
  window.__ARGOS__ = ArgosGlobal;
})();
