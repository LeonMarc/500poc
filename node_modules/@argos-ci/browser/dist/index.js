// src/viewport.ts
var viewportPresets = {
  "macbook-16": { width: 1536, height: 960 },
  "macbook-15": { width: 1440, height: 900 },
  "macbook-13": { width: 1280, height: 800 },
  "macbook-11": { width: 1366, height: 768 },
  "ipad-2": { width: 768, height: 1024 },
  "ipad-mini": { width: 768, height: 1024 },
  "iphone-xr": { width: 414, height: 896 },
  "iphone-x": { width: 375, height: 812 },
  "iphone-6+": { width: 414, height: 736 },
  "iphone-se2": { width: 375, height: 667 },
  "iphone-8": { width: 375, height: 667 },
  "iphone-7": { width: 375, height: 667 },
  "iphone-6": { width: 375, height: 667 },
  "iphone-5": { width: 320, height: 568 },
  "iphone-4": { width: 320, height: 480 },
  "iphone-3": { width: 320, height: 480 },
  "samsung-s10": { width: 360, height: 760 },
  "samsung-note9": { width: 414, height: 846 }
};
function resolveViewportPreset(preset, orientation) {
  const { width, height } = viewportPresets[preset];
  return orientation === "portrait" ? { width, height } : { width: height, height: width };
}
function checkIsViewportPresetOption(value) {
  return typeof value === "object" && value !== null && "preset" in value;
}
function resolveViewport(viewportOption) {
  if (checkIsViewportPresetOption(viewportOption)) {
    return resolveViewportPreset(
      viewportOption.preset,
      viewportOption.orientation ?? "portrait"
    );
  }
  if (typeof viewportOption === "string") {
    return resolveViewportPreset(viewportOption, "portrait");
  }
  return viewportOption;
}

// src/script.ts
function getGlobalScript() {
  return '"use strict";\n(() => {\n  // src/global/stabilization.ts\n  var GLOBAL_CSS = `\n/* Hide carets */\n* {\n  caret-color: transparent !important;\n}\n\n/* Reduce text-aliasing issues in Blink browsers */\n* {\n  -webkit-font-smoothing: antialiased !important;\n}\n\n/* Hide scrollbars */\n::-webkit-scrollbar {\n  display: none !important;\n}\n\n/* Make the element transparent */\n[data-visual-test="transparent"] {\n  color: transparent !important;\n  font-family: monospace !important;\n  opacity: 0 !important;\n}\n\n/* Remove the element */\n[data-visual-test="removed"] {\n  display: none !important;\n}\n\n/* Disable radius */\n[data-visual-test-no-radius]:not([data-visual-test-no-radius="false"]) {\n  border-radius: 0 !important;\n}\n`;\n  function setAndBackupSpellcheck(element, spellcheck) {\n    element.setAttribute(\n      "data-argos-bck-spellcheck",\n      element.getAttribute("spellcheck") ?? "unset"\n    );\n    element.setAttribute("spellcheck", spellcheck);\n  }\n  var SPELL_CHECK_QUERY = "[contenteditable]:not([contenteditable=false]):not([spellcheck=false]), input:not([spellcheck=false]), textarea:not([spellcheck=false])";\n  function disableSpellCheck(document2) {\n    const inputs = document2.querySelectorAll(SPELL_CHECK_QUERY);\n    inputs.forEach((element) => {\n      if (!checkIsHTMLElement(element)) {\n        return;\n      }\n      setAndBackupSpellcheck(element, "false");\n    });\n  }\n  function restoreSpellCheck(document2) {\n    const inputs = document2.querySelectorAll(SPELL_CHECK_QUERY);\n    inputs.forEach((input) => {\n      const spellcheck = input.getAttribute("data-argos-bck-spellcheck");\n      if (spellcheck === "unset") {\n        input.removeAttribute("spellcheck");\n      } else if (spellcheck) {\n        input.setAttribute("spellcheck", spellcheck);\n      }\n      input.removeAttribute("data-argos-bck-spellcheck");\n    });\n  }\n  function injectGlobalStyles(document2, css, id) {\n    const style = document2.createElement("style");\n    style.textContent = css;\n    style.id = id;\n    document2.head.appendChild(style);\n  }\n  function removeGlobalStyles(document2, id) {\n    const style = document2.getElementById(id);\n    if (style) {\n      style.remove();\n    }\n  }\n  var checkIsHTMLElement = (element) => {\n    return "style" in element;\n  };\n  function setAndBackupPosition(element, position) {\n    const previousPosition = element.style.position;\n    const previousRect = element.getBoundingClientRect();\n    element.style.position = position;\n    const currentRect = element.getBoundingClientRect();\n    if (previousRect.x !== currentRect.x || previousRect.y !== currentRect.y) {\n      element.style.position = previousPosition;\n      return;\n    }\n    element.setAttribute("data-argos-bck-position", previousPosition ?? "unset");\n  }\n  function stabilizeElementPositions(document2) {\n    const window2 = document2.defaultView;\n    if (!window2) {\n      return;\n    }\n    const elements = Array.from(document2.querySelectorAll("*"));\n    elements.forEach((element) => {\n      if (!checkIsHTMLElement(element)) {\n        return;\n      }\n      if (element.tagName === "IFRAME") {\n        return;\n      }\n      const style = window2.getComputedStyle(element);\n      const position = style.position;\n      if (position === "fixed") {\n        setAndBackupPosition(element, "absolute");\n      } else if (position === "sticky") {\n        setAndBackupPosition(element, "relative");\n      }\n    });\n  }\n  function restoreElementPositions(document2) {\n    const window2 = document2.defaultView;\n    if (!window2) {\n      return;\n    }\n    const elements = Array.from(document2.querySelectorAll("*"));\n    elements.forEach((element) => {\n      if (!checkIsHTMLElement(element)) {\n        return;\n      }\n      const position = element.getAttribute("data-argos-bck-position");\n      if (position === "unset") {\n        element.style.removeProperty("position");\n      } else if (position) {\n        element.style.position = position;\n      }\n      element.removeAttribute("data-argos-bck-position");\n    });\n  }\n  function addGlobalClass(document2, className) {\n    document2.documentElement.classList.add(className);\n  }\n  function removeGlobalClass(document2, className) {\n    document2.documentElement.classList.remove(className);\n  }\n  function setup(document2, { fullPage, argosCSS } = {}) {\n    addGlobalClass(document2, "__argos__");\n    injectGlobalStyles(document2, GLOBAL_CSS, "argos-reset-style");\n    if (argosCSS) {\n      injectGlobalStyles(document2, argosCSS, "argos-user-style");\n    }\n    disableSpellCheck(document2);\n    if (fullPage) {\n      stabilizeElementPositions(document2);\n    }\n  }\n  function teardown(document2, { fullPage, argosCSS } = {}) {\n    removeGlobalClass(document2, "__argos__");\n    removeGlobalStyles(document2, "argos-reset-style");\n    if (argosCSS) {\n      removeGlobalStyles(document2, "argos-user-style");\n    }\n    restoreSpellCheck(document2);\n    if (fullPage) {\n      restoreElementPositions(document2);\n    }\n  }\n  function waitForFontsToLoad(document2) {\n    return document2.fonts.status === "loaded";\n  }\n  function waitForImagesToLoad(document2) {\n    const images = Array.from(document2.images);\n    images.forEach((img) => {\n      if (img.decoding !== "sync") {\n        img.decoding = "sync";\n      }\n      if (img.loading !== "eager") {\n        img.loading = "eager";\n      }\n    });\n    return images.every((img) => img.complete);\n  }\n  function waitForNoBusy(document2) {\n    const checkIsVisible = (element) => {\n      if (element instanceof HTMLElement && (element.offsetHeight !== 0 || element.offsetWidth !== 0)) {\n        return true;\n      }\n      return element.getClientRects().length > 0;\n    };\n    const elements = Array.from(document2.querySelectorAll(\'[aria-busy="true"]\'));\n    return elements.every((element) => !checkIsVisible(element));\n  }\n  function getStabilityState(document2, options) {\n    const { ariaBusy = true, images = true, fonts = true } = options ?? {};\n    return {\n      ariaBusy: ariaBusy ? waitForNoBusy(document2) : true,\n      images: images ? waitForImagesToLoad(document2) : true,\n      fonts: fonts ? waitForFontsToLoad(document2) : true\n    };\n  }\n  var VALIDATION_ERRORS = {\n    ariaBusy: "Some elements still have `aria-busy=\'true\'`",\n    images: "Some images are still loading",\n    fonts: "Some fonts are still loading"\n  };\n  function getStabilityFailureReasons(document2, options) {\n    const stabilityState = getStabilityState(document2, options);\n    return Object.entries(stabilityState).reduce(\n      (reasons, [key, value]) => {\n        if (!value) {\n          reasons.push(VALIDATION_ERRORS[key]);\n        }\n        return reasons;\n      },\n      []\n    );\n  }\n  function checkIsStable(document2, options) {\n    const stabilityState = getStabilityState(document2, options);\n    return Object.values(stabilityState).every(Boolean);\n  }\n\n  // src/global/media.ts\n  function getColorScheme(window2) {\n    return window2.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";\n  }\n  function getMediaType(window2) {\n    return window2.matchMedia("print").matches ? "print" : "screen";\n  }\n\n  // src/global/index.ts\n  var ArgosGlobal = {\n    checkIsStable: (options) => checkIsStable(document, options),\n    getStabilityFailureReasons: (options) => getStabilityFailureReasons(document, options),\n    setup: (options = {}) => setup(document, options),\n    teardown: (options = {}) => teardown(document, options),\n    getColorScheme: () => getColorScheme(window),\n    getMediaType: () => getMediaType(window)\n  };\n  window.__ARGOS__ = ArgosGlobal;\n})();\n';
}
export {
  getGlobalScript,
  resolveViewport
};
