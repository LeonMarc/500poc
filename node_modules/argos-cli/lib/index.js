"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _chalk = _interopRequireDefault(require("chalk"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _errorReporter = _interopRequireWildcard(require("./errorReporter"));

var _package = _interopRequireDefault(require("../package.json"));

var _upload = _interopRequireWildcard(require("./upload"));

var _cancel = _interopRequireWildcard(require("./cancel"));

var _display = require("./display");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
(0, _updateNotifier.default)({
  pkg: _package.default
}).notify();
(0, _errorReporter.initializeErrorReporter)();

if (process.env.NODE_ENV !== "production") {
  process.on("exit", code => {
    console.info(`exit code: ${code}`);
  });
}

const list = value => value.split(",");

_commander.default.version(_package.default.version);

_commander.default.command("upload <directory>").description("Upload screenshots").option("-T, --token <token>", "Repository token").option("-C, --commit <commit>", "Git commit").option("-B, --branch <branch>", "Git branch").option("--external-build-id [string]", "ID of the build (batch mode only)").option("--batchCount [int]", "Number of batches expected (batch mode)", parseInt).option("--build-name [string]", "Name of the build").option("--ignore <list>", 'List of glob files to ignore (ex: "**/*.png,**/diff.jpg")', list).action(async (directory, command) => {
  console.log(`=== argos-cli: uploading '${directory}' directory...\n`);
  let json;

  try {
    const res = await (0, _upload.default)({
      directory,
      ...command
    });
    const text = await res.text();

    try {
      json = JSON.parse(text);
    } catch (error) {
      throw new Error(`${res.status}: Failed to parse response body as JSON:\n\n${text}`);
    }

    if (json.error) {
      throw new _upload.UploadError(json.error.message);
    }
  } catch (error) {
    (0, _display.displayError)("Sorry an error happened:");

    if (error instanceof _upload.UploadError) {
      console.error(_chalk.default.bold.red(error.message));
    } else {
      _errorReporter.default.captureException(error);

      console.error(_chalk.default.bold.red(error.message));
      console.error(_chalk.default.bold.red(error.stack));
    }

    process.exit(1);
  }

  (0, _display.displaySuccess)("Upload complete!");
  console.log(_chalk.default.green(`build id: ${json.build.id}`));
  console.log(_chalk.default.green(`build url: ${json.build.buildUrl}`));
});

_commander.default.command("cancel").description("Cancel the build (batch mode only)").option("-T, --token <token>", "Repository token").option("--external-build-id [string]", "ID of the build (batch mode only)").action(async command => {
  console.log(`=== argos-cli: canceling build`);
  let json;

  try {
    const res = await (0, _cancel.default)({ ...command
    });
    const text = await res.text();

    try {
      json = JSON.parse(text);
    } catch (error) {
      throw new Error(`${res.status}: Failed to parse response body as JSON:\n\n${text}`);
    }

    if (json.error) {
      throw new _cancel.CancelError(json.error.message);
    }
  } catch (error) {
    (0, _display.displayError)("Sorry an error happened:");

    if (error instanceof _cancel.CancelError) {
      console.error(_chalk.default.bold.red(error.message));
    } else {
      _errorReporter.default.captureException(error);

      console.error(_chalk.default.bold.red(error.message));
      console.error(_chalk.default.bold.red(error.stack));
    }

    process.exit(1);
  }

  (0, _display.displaySuccess)("Build canceled.");
});

if (!process.argv.slice(2).length) {
  _commander.default.outputHelp();
} else {
  _commander.default.parse(process.argv);
}