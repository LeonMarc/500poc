"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CancelError = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _config = _interopRequireDefault(require("./config"));

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CancelError extends Error {}

exports.CancelError = CancelError;

async function cancel(options) {
  const {
    token: tokenOption,
    externalBuildId: externalBuildIdOption
  } = options;

  const token = tokenOption || _config.default.get("token");

  if (!token) {
    throw new CancelError("Token missing: use ARGOS_TOKEN or the --token option.");
  }

  const externalBuildId = externalBuildIdOption || _config.default.get("externalBuildId");

  return (0, _nodeFetch.default)(`${_config.default.get("endpoint")}/cancel-build`, {
    headers: {
      "X-Argos-CLI-Version": _package.default.version,
      "Content-Type": "application/json"
    },
    method: "POST",
    body: JSON.stringify({
      token,
      externalBuildId
    })
  });
}

var _default = cancel;
exports.default = _default;